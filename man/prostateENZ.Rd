% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prostateENZ.R
\name{prostateENZ}
\alias{prostateENZ}
\title{LNCaP Cells Treated with Enzalutamide}
\format{
\code{MultiAssayExperiment} obtained from an \code{ArchR} project. Annotated with the Hg38 genome build.
Contains the following experiments:
\itemize{
\item{\strong{TileMatrix500}: SingleCellAccessibilityExperiment with 6062095 rows and 15522 columns}
\item{\strong{GeneScoreMatrix}: SingleCellExperiment with 24919 rows and 15522 columns}
\item{\strong{GeneIntegrationMatrix}: SingleCellExperiment with 23525 rows and 15522 columns}
\item{\strong{PeakMatrix}: SingleCellExperiment with 80210 rows and 15522 columns}
\item{\strong{MotifMatrix}: SingleCellExperiment with 870 rows and 15522 columns}
}
}
\usage{
prostateENZ(
  metadata = FALSE,
  experiments = c("TileMatrix500", "GeneScoreMatrix", "GeneIntegrationMatrix",
    "PeakMatrix", "MotifMatrix")
)
}
\arguments{
\item{metadata}{logical flag specifying whether to return data or metadata only}

\item{experiments}{character vector of matrices to return; see \code{Format}}
}
\value{
\code{MultiAssayExperiment} made up of \code{SingleCellExperiment}s
with assays stored as \code{DelayedMatrix} objects.
If \code{metadata = TRUE}, an \code{ExperimentHub} object listing this data set's metadata.
}
\description{
Single-cell ATAC sequencing of parental LNCaP cells (DMSO treated, the control),
LNCaP cells treated with 10ÂµM enzalutamide for 48 hours,
and LNCaP-derived enzalutamide-resistant RES-A and RES-B cells.
}
\section{Data storage and access}{

The \code{MultiAssayExperiments} is split into separate \code{SingleCellExperiment}
objects and they in turn are split into components, all of which are stored in a
single hdf5 file. Data and can be accessed with a special function that extracts
elements of the requested experiment(s), reassembles them, and builds an MAE.
}

\section{Data preparation}{


scATAC data was downloaded from Gene Expression Omnibus
(acc. no. \href{https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE168667}{GSE168667})
and analyzed with SingleCell ATAC - 10X pipeline v2.0.0 \cr
scRNAseq data was downloaded from  Gene Expression Omnibus
(acc.no. \href{https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE168668}{GSE168668})
and analyzed with SingleCell Gene Expression Analysis - 10X pipeline v6.0.1. \cr

Downstream analysis was performed with the \code{ArchR} package:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# attach ArchR package
library(ArchR)

# configure ArchR
addArchRThreads(16L)
addArchRGenome("hg38")

# create arrow file from fragment files
## list fragment files
fragments <- <FRAGMENT_FILES>
## assign sample names
names(fragments) <- <SAMPLE_IDs>
## create arrows
createArrowFiles(inputFiles = fragments, sampleNames = names(fragments))

# specify output directory
outDir <- <OUTPUT_DIRECTORY>

# locate arrow files
arrows <- <ARROW_FILES>

# create ArchR project
project <- ArchRProject(arrows, outDir)

# add sample annotation
sampleNames <- c("SRR13927735", "SRR13927736", "SRR13927737", "SRR13927738")
sampleCells <- c("LNCaP", "LNCaP", "LNCaP RES-A", "LNCaP RES-B")
sampleTreatment <- c("0.1\% DMSO 48h", "enzalutamide 48h", "enzalutamide", "enzalutamide")
sampleEnzalutamide <- c("sensitive", "sensitive", "resistant", "resistant")
names(sampleCells) <- names(sampleTreatment) <- names(sampleEnzalutamide) <- sampleNames
project$Cells <- sampleCells[project$Sample]
project$Treatment <- sampleTreatment[project$Sample]
project$Enzalutamide <- sampleEnzalutamide[project$Sample]
project$sampleLabels <- sampleLabels[project$Sample]


# reduce dimensionality by iterative LSI
project <- addIterativeLSI(project, useMatrix = "TileMatrix", name = "iLSI_ATAC")




# load scRNAseq data from DataSetDB
scRNAseq <- DataSetDB::getDatasetAsSE("DS000013306")


# run scRNAseq pipeline
GeneExpressionAnalysis <- gp.sa.solo::runSingleCellBasic2(scRNAseq, ncpu = 16L)

# isolate the analyzed data
SCE <- GeneExpressionAnalysis$sce
# adjust for integration
rownames(SCE) <- rowData(SCE)$Symbol
assay(SCE, "counts") \%<>\% as("dgCMatrix")
# drop duplicates
SCE <- SCE[!duplicated(rowData(SCE)$Symbol), ]


# integrate
## prepare grouping for constrained integration
groupMapping <- SimpleList(
    sens_NT = SimpleList(
        ATAC = project$cellNames[project$Sample == "SRR13927735"],
        RNA = grep("SRR13927739", colnames(SCE), value = TRUE)
    ),
    sens_Enz = SimpleList(
        ATAC = project$cellNames[project$Sample == "SRR13927736"],
        RNA = grep("SRR13927740", colnames(SCE), value = TRUE)
    ),
    RES_A = SimpleList(
        ATAC = project$cellNames[project$Sample == "SRR13927737"],
        RNA = grep("SRR13927741", colnames(SCE), value = TRUE)
    ),
    RES_B = SimpleList(
        ATAC = project$cellNames[project$Sample == "SRR13927738"],
        RNA = grep("SRR13927742", colnames(SCE), value = TRUE)
    )
)

## execute
project <- addGeneIntegrationMatrix(project, useMatrix = "GeneScoreMatrix",
                                    matrixName = "GeneIntegrationMatrix",
                                    reducedDims = "iLSI_ATAC", seRNA = SCE,
                                    groupATAC = "Sample", groupRNA = "Sample", groupList = groupMapping,
                                    nameCell = "predictedCell",
                                    nameGroup = "predictedGroup",
                                    nameScore = "predictedScore",
                                    addToArrow = TRUE, force = TRUE)

# add LSI for RNAseq
project <- addIterativeLSI(project, useMatrix = "GeneIntegrationMatrix", name = "iLSI_RNAseq")

# combine dim-reduced ATAC and RNAseq
project <- addCombinedDims(project, name = "iLSI_Combined", reducedDims = c("iLSI_ATAC", "iLSI_RNAseq"))

# add UMAP embedding on combined reduced dimensionality
project <- addUMAP(project, reducedDims = "iLSI_Combined", name = "UMAP_Combined", verbose = FALSE)

# impute weights (for smoother visualizations)
project <- addImputeWeights(project, reducedDims = "iLSI_Combined")

# add group coverages
## inspect available cell numbers
table(project$Sample)
project <- addGroupCoverages(project, groupBy = "Sample", minCells = 30, maxCells = 250)

# add pseudo-bulk replicates
## requires MACS2 installation
project <- addReproduciblePeakSet(project, groupBy = "Sample", pathToMacs2 = "<PATH_TO_MACS2_INSTALLATION>")

# add peak matrix
project <- addPeakMatrix(project)
getAvailableMatrices(project)

# add motif annotation
project <- addMotifAnnotations(project, motifset = "cisbp", name = "Motif")

# add background peaks
project <- addBgdPeaks(project, method = "chromVAR")

# add deviation matrix
project <- addDeviationsMatrix(project, peakAnnotation = "Motif", force = TRUE)
getAvailableMatrices(project)

# save ArchR project
saveArchRProject(project)



# convert project to MultiAssayExperiment
MAE <- maw.archr::create.mae.with.multiple.sces.from.archr(outDir, tile.sizes = 500)

# inspect object
MAE

# add per-cell transcription factor activity to the MAE

## compute TF activity
regulonActivity <- <EPIREGULON_WORKFLOW>

## convert to gdCMatrix
regulonActivity <- as(regulonActivity, "gdCMatrix")

## wrap in SingleCellExperiment
ActivityMatrix <- SingleCellExperiment(assays = list(activity = regulonActivity))

## add colData (cell information)
colData(ActivityMatrix) <- getCellColData(project)

## add row data (feature/gene information)- from gene expression matrix
### extract gene expression information
GeneIntegrationMatrix <- getMatrixFromProject(project, "GeneIntegrationMatrix")
### change rownames to gene symbols
rownames(GeneIntegrationMatrix) <- rowData(GeneIntegrationMatrix)[["name"]]
### copy relevant gene data
rowData(ActivityMatrix) <- rowData(GeneIntegrationMatrix)[rownames(ActivityMatrix), ]
### add proper numeric indices to genes
rowData(ActivityMatrix)[["idx"]] <-
as.integer(factor(rowData(ActivityMatrix)[["name"]], levels = unique(rowData(ActivityMatrix)[["name"]])))

## add embeddings
reducedDim(ActivityMatrix, "iLSI_ATAC") <- getReducedDims(project, "iLSI_ATAC")[colnames(ActivityMatrix), ]
reducedDim(ActivityMatrix, "UMAP_ATAC") <- getEmbedding(project, "UMAP_ATAC")[colnames(ActivityMatrix), ]
reducedDim(ActivityMatrix, "UMAP_Combined") <- getEmbedding(project, "UMAP_Combined")[colnames(ActivityMatrix), ]

## append as experiment
MAE <- c(MAE, ActivityMatrix = ActivityMatrix)


# save object
saveMAE("inst/extdata/prostateENZ.h5")

}\if{html}{\out{</div>}}
}

\references{
Single-cell ATAC and RNA sequencing reveal pre-existing and persistent cells
associated with prostate cancer relapse. \cr
Taavitsainen \emph{et al.}, \emph{Nature Communications} 2021 Sep 6;12(1):5307 \cr
\href{https://pubmed.ncbi.nlm.nih.gov/34489465/}{doi: 10.1038/s41467-021-25624-1}
}
